import threading
import time
import telebot
from table_parser import mailing, get_user_id, get_user_tag, get_registration, get_data, get_transfer, get_living
import os
from dotenv import load_dotenv


load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

TOKEN = os.getenv("TOKEN")

bot = telebot.TeleBot(TOKEN)
admin_ids = [550509099, 1628109575, 766749758, 2086166118, 1072196201, 847536529]
faq_id = -4570130952

hi_message = '–ü—Ä–∏–≤–µ—Ç üí•\n–≠—Ç–æ –±–æ—Ç –ü–æ—Å–≤—è—â–µ–Ω–∏—è –≤ —Å—Ç—É–¥–µ–Ω—Ç—ã 2024\n–ó–¥–µ—Å—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ü§†\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ö–ª–æ–Ω–¥–∞–π–∫–µüåµ\n–ß—Ç–æ–± –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏ /help'
reg_message = '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! \n–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–º–æ–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å—Ç—É–¥–µ–Ω—á–µ—Å—Ç–≤–∞ üèú'
transfer_message = '–ü–æ –∫–æ–Ω—è–º üê¥\n–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª(–∞) —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä.'
living_message = '–í—ã—Å–ø–∞—Ç—å—Å—è —Å–º–æ–∂–µ—à—å üõå \n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å). –ù–∞ –ü–æ—Å–≤—è—Ç–µ —Ö–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω–µ—à—å –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.'
# money_message = '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'


def add_user(message):
    user_id, user_tag = message.from_user.id, message.from_user.username
    if get_user_id(user_tag) == 0:
        with open('users.txt', 'a') as file:
            file.writelines(str(user_tag) + ' ' + str(user_id) + '\n')


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    # print(message)
    if message.chat.type == 'private':
        if message.text[0] == '/':
            if message.text == '/start':
                bot.send_message(message.from_user.id, hi_message)
                add_user(message)
            elif message.text == '/help':
                bot.send_message(message.from_user.id, "–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–∞–¥)")
                bot.register_next_step_handler(message, get_help)
            else:
                a = message.text.strip().split()
                if a[0] == '/send_message' and message.from_user.id in admin_ids:
                    bot.send_message(message.from_user.id, '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã(–¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–ø)')
                    bot.register_next_step_handler(message, get_table)
                else:
                    bot.send_message(message.from_user.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

        else:
            bot.send_message(message.from_user.id, "–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help")


def get_table(message):
    table_name = message.text
    bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è")
    if message.text.lower().strip() != '—Å—Ç–æ–ø':
        bot.register_next_step_handler(message, get_row, table_name)
    else:
        bot.send_message(message.from_user.id, '–¥–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω')
        return


def get_row(message, table_name):
    row_name = message.text
    bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è")
    if message.text.lower().strip() != '—Å—Ç–æ–ø':
        bot.register_next_step_handler(message, get_value, table_name, row_name)
    else:
        bot.send_message(message.from_user.id, '–¥–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω')
        return


def get_value(message, table_name, row_name):
    row_value = message.text
    bot.send_message(message.from_user.id, "–≤–≤–µ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç")
    if message.text.lower().strip() != '—Å—Ç–æ–ø':
        bot.register_next_step_handler(message, start_mailing, table_name, row_name, row_value)
    else:
        bot.send_message(message.from_user.id, '–¥–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω')
        return


def start_mailing(message, table_name, row_name, value):
    txt = message.text
    if table_name and row_name and value and txt:
        try:
            users, warn = mailing(table_name, row_name, value, txt)
        except:
            bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏')
        else:
            for user in users:
                user_tag, user_id = user
                try:
                    bot.send_message(user_id, txt)
                except:
                    warn.append((user_tag, user_id))
            if len(users) != 0:
                bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞')
            else:
                bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –¥–æ—à–ª–∞')
            unreg_mess = ''
            for i in warn:
                unreg_mess += f'@{i[0]}\n'
            bot.send_message(message.from_user.id, '–ù–µ –∑–∞—à–ª–∏ –≤ –±–æ—Ç–∞(–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–≥—à–∫—É): \n' + unreg_mess)
    else:
        bot.send_message(message.from_user.id, '–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏')


def get_help(message):
    if message.text.lower().strip() != '–Ω–∞–∑–∞–¥':
        user_tag = get_user_tag(message.from_user.id)
        if user_tag:
            bot.send_message(faq_id, f'message from user @{get_user_tag(message.from_user.id)}\n' + message.text)
            bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –∂–¥–∏ –æ—Ç–≤–µ—Ç–∞')
        else:
            bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑')
    else:
        bot.send_message(message.from_user.id, '–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω')
        return


def send_periodic_messages():
    while True:
        data = get_data('Registration')
        users_tag = get_registration(data)
        for user_tag in users_tag:
            try:
                bot.send_message(get_user_id(user_tag), reg_message)
            except:
                pass
            else:
                with open('reg_list.txt', 'a') as file:
                    file.writelines(str(user_tag) + '\n')

        data = get_data('Transfer')
        users_tag = get_transfer(data)
        for user_tag in users_tag:
            try:
                bot.send_message(get_user_id(user_tag), transfer_message)
            except:
                pass
            else:
                with open('transfer_list.txt', 'a') as file:
                    file.writelines(str(user_tag) + '\n')

        data = get_data('Rasselenie')
        users_tag = get_living(data)
        for user_tag in users_tag:
            try:
                bot.send_message(get_user_id(user_tag), living_message)
            except:
                pass
            else:
                with open('living_list.txt', 'a') as file:
                    file.writelines(str(user_tag) + '\n')
        time.sleep(300)


thread = threading.Thread(target=send_periodic_messages)
thread.start()
bot.polling(none_stop=True, interval=0)
